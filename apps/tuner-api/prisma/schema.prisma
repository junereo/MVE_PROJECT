generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 회원 등급
enum UserRole {
  superadmin
  admin
  ordinary
  expert
}

enum AgeGroup {
  teen // 10대
  twenties // 20대
  thirties // 30대
  forties // 40대
  fifties // 50대
  sixties // 60대
}

enum Genre {
  hiphop
  ballad
  dance
  rnb
  rock
  trot
  pop
  gukak
  ccm
  edm
  classical
  jazz
}

enum OAuthProvider {
  kakao
  google
  // 필요 시 naver, apple 등등 추가
}

// 설문 타입
enum SurveyType {
  general
  official
}

// 커스텀 설문 옵션
enum QuestionType {
  fixed
  custom
}

// 설문 기간
enum SurveyActive {
  upcoming // 설문예정
  ongoing // 설문중
  closed // 설문종료
}

enum SurveyStatus {
  draft // 작성중
  complete //완료
}

enum EndedBy {
  expired // 기간 종료
  outOfRewards // 보상 소진
  closedByCreator // 생성자 종료
}

enum TransactionType {
  DEPOSIT // 입금 (리워드 지급 등)
  WITHDRAW // 출금 (출금 요청 처리 등)
}

enum WithdrawalStatus {
  pending // 대기중
  completed // 완료
  failed //실패
}

// enum RewardStatus {
//   pending // 대기중
//   completed // 완료
//   failed //실패
// }

// enum RewardType {
//   normal // 일반
//   expert // 익스퍼트
// }

// enum SbtType {
//   badge
//   token
// }

// // 보상 지급
// enum SbtCondition {
//   auto // 자동발급
//   manual // 수동발급
// }

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  phone_number    String
  password        String
  nickname        String // 유저는 닉네임 / 관리자는 실명 
  gender          Boolean? // true=남자, false=여자
  age             AgeGroup? // enum
  genre           Genre?   
  job_domain      Boolean? // 음악전공/종사자 여부
  balance         Int       @default(0)
  wallet_address  String?
  simple_password String?
  role            UserRole  @default(ordinary)
  badge_issued_at DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  oauths            User_Oauth[]
  surveys           Survey[]
  surveyResponses   Survey_Participants[]
  transaction       Transaction[]
  withdrawalRequest WithdrawalRequest[]
}

model User_Oauth {
  id            Int      @id @default(autoincrement())
  provider_id   String   @unique
  provider      String
  nickname      String
  email         String
  profile_image String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Survey {
  id              Int                   @id @default(autoincrement())
  survey_title    String
  music_title     String
  artist          String
  music_uri       String
  thumbnail_uri   String
  is_released     Boolean
  released_date   DateTime
  user_id         Int
  type            SurveyType
  genre           Genre
  start_at        DateTime
  end_at          DateTime
  reward_amount   Int?
  reward          Int?
  expert_reward   Int?
  is_active       SurveyActive
  ended_by        EndedBy?              @default(expired)
  status          SurveyStatus          @default(draft)
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  creator         User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  questions       Int
  survey_question Json?
  participants    Survey_Participants[]
  result          Survey_Result?
}

model Survey_Question {
  id             Int          @id @default(autoincrement())
  question_type  QuestionType
  question       Json
  question_order Int
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model Survey_Participants {
  id         Int          @id @default(autoincrement())
  user_id    Int?
  survey_id  Int
  answers    Json
  status     SurveyStatus @default(draft)
  rewarded   Boolean      @default(false)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  user   User?  @relation(fields: [user_id], references: [id], onDelete: SetNull)
  survey Survey @relation(fields: [survey_id], references: [id])
}

model Survey_Result {
  id                    Int      @id @default(autoincrement())
  survey_id             Int      @unique
  survey_statistics     Json
  is_public             Boolean  @default(false)
  metadata_ipfs         String?
  respondents           Int
  reward_claimed_amount Int
  reward_claimed        Int
  created_at            DateTime

  survey Survey @relation(fields: [survey_id], references: [id])
}

model Transaction {
  id         Int             @id @default(autoincrement())
  user_id    Int
  type       TransactionType
  amount     Int // 양수 값만 저장
  memo       String? // 출금요청/리워드 지급 등
  created_at DateTime        @default(now())
  user       User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model WithdrawalRequest {
  id           Int              @id @default(autoincrement())
  user_id      Int
  amount       Int
  txhash       String
  message      String
  signature    String
  status       WithdrawalStatus @default(pending) //   pending // 대기중 completed // 완료failed //실패
  requested_at DateTime         @default(now())
  user         User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model TunerContract {
  id          Int      @id @default(autoincrement())
  ca_token    String?
  ca_badge    String?
  ca_survey   String?
  ca_transac  String?
  abi_survey  Json?
  abi_badge   Json?
  abi_transac Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
