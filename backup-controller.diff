diff --git a/apps/tuner-api/src/controllers/survey.controller.ts b/apps/tuner-api/src/controllers/survey.controller.ts
index bc21db0..b666610 100644
--- a/apps/tuner-api/src/controllers/survey.controller.ts
+++ b/apps/tuner-api/src/controllers/survey.controller.ts
@@ -10,7 +10,6 @@ import {
   getSurveyResult,
   createSurveyResult,
   getSurveyParticipation,
-
 } from "../services/survey.service";
 import { PrismaClient, QuestionType } from "@prisma/client";
 const prisma = new PrismaClient();
@@ -134,7 +133,7 @@ export const getSurvey = async (req: Request, res: Response): Promise<void> => {
       return;
     }
 
-    // 특정 설문 상세 조회 
+    // 특정 설문 상세 조회
     const survey = await prisma.survey.findUnique({
       where: { id: surveyId },
       include: {
@@ -169,7 +168,6 @@ export const getSurvey = async (req: Request, res: Response): Promise<void> => {
   }
 };
 
-
 export const getSurveyQuestionList = async (
   req: Request,
   res: Response
@@ -210,7 +208,6 @@ export const createSurveyParticipantHandler = async (
       return;
     }
 
-
     const newParticipant = await createSurveyParticipant({
       user_id: parseInt(user_id),
       survey_id: parseInt(survey_id),
@@ -285,7 +282,6 @@ export const createSurveyResultHandler = async (
       reward_claimed,
     } = req.body;
 
-
     const result = await createSurveyResult({
       survey_id,
       survey_statistics,
@@ -331,14 +327,17 @@ export const getSurveyResultHandler = async (
   }
 };
 
-export const getSurveyParticipationController = async (req: AuthRequest, res: Response): Promise<void> => {
+export const getSurveyParticipationController = async (
+  req: AuthRequest,
+  res: Response
+): Promise<void> => {
   try {
     const surveyId = Number(req.params.surveyId);
     const userId = Number(req.user?.userId);
 
     if (isNaN(surveyId) || isNaN(userId)) {
       res.status(400).json({ message: "잘못된 요청" });
-      return
+      return;
     }
 
     const result = await getSurveyParticipation({ surveyId, userId });
