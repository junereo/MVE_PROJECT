diff --git a/apps/tuner-api/src/wallet/services/survey.service.ts b/apps/tuner-api/src/wallet/services/survey.service.ts
index 5813bfe..a9b4b5d 100644
--- a/apps/tuner-api/src/wallet/services/survey.service.ts
+++ b/apps/tuner-api/src/wallet/services/survey.service.ts
@@ -1,13 +1,19 @@
 // src/wallet/service/survey.services.ts
-import { JsonRpcProvider, Contract, Wallet, keccak256, toUtf8Bytes } from 'ethers';
-import surveyABI from '../../../ABI/survey1155_ABI.json' assert { type: 'json' };
-import { MetaTransctionService } from './meta_transction.service';
-import { create as createIpfsClient, IPFSHTTPClient } from 'ipfs-http-client';
+import {
+  JsonRpcProvider,
+  Contract,
+  Wallet,
+  keccak256,
+  toUtf8Bytes,
+} from "ethers";
+import surveyABI from "../../../ABI/survey1155_ABI.json" assert { type: "json" };
+import { MetaTransctionService } from "./meta_transction.service";
+import { create as createIpfsClient, IPFSHTTPClient } from "ipfs-http-client";
 // import { createReadStream, existsSync } from 'fs';
 // import { promises as fs } from 'fs';
 // import path from 'path';
 
-import dotenv from 'dotenv';
+import dotenv from "dotenv";
 dotenv.config();
 
 // Initialize IPFS client
@@ -45,11 +51,19 @@ export class SurveyService {
   async init(): Promise<void> {
     this.provider = new JsonRpcProvider(process.env.SEPLOIA_RPC_URL!);
     this.wallet = new Wallet(process.env.WALLET_PRIVATE_KEY!, this.provider);
-    this.contract = new Contract(process.env.SURVEY_CONTRACT_ADDRESS!, surveyABI, this.wallet);
+    this.contract = new Contract(
+      process.env.SURVEY_CONTRACT_ADDRESS!,
+      surveyABI,
+      this.wallet
+    );
   }
 
   // ✅ submitSurveyAndMint (서베이 응답 + NFT 민팅)
-  async submitSurveyAndMint(uid: string, surveyId: string, answers: string): Promise<any> {
+  async submitSurveyAndMint(
+    uid: string,
+    surveyId: string,
+    answers: string
+  ): Promise<any> {
     const message = { surveyId, uid, answers };
 
     // 1. 메타데이터 구성 및 IPFS 업로드
@@ -59,8 +73,8 @@ export class SurveyService {
       attributes: [
         { trait_type: "UID", value: uid },
         { trait_type: "Survey", value: surveyId },
-        { trait_type: "Completed At", value: new Date().toISOString() }
-      ]
+        { trait_type: "Completed At", value: new Date().toISOString() },
+      ],
     };
 
     const metadataUri = await this.uploadToIPFS(metadata);
@@ -69,17 +83,22 @@ export class SurveyService {
     const tokenId = BigInt(keccak256(toUtf8Bytes(surveyId)));
 
     // 3. owner로 mint
-    const tx = await this.contract.mint(this.wallet.address, surveyId, 1, metadataUri);
+    const tx = await this.contract.mint(
+      this.wallet.address,
+      surveyId,
+      1,
+      metadataUri
+    );
     const receipt = await tx.wait();
 
     return {
       status: "minted",
       tokenId: tokenId.toString(),
       txHash: receipt.hash,
-      metadataUri
+      metadataUri,
     };
   }
-    /**
+  /**
    * Survey 메타데이터를 IPFS에 업로드
    * @param metadata Survey 메타데이터 객체
    * @returns ipfs://CID 형태의 URI
@@ -92,8 +111,8 @@ export class SurveyService {
       // 2. IPFS에 업로드
       const result = await ipfs.add(metadataJson, {
         cidVersion: 1,
-        hashAlg: 'sha2-256',
-        rawLeaves: true
+        hashAlg: "sha2-256",
+        rawLeaves: true,
       });
 
       // 3. Pin 고정
@@ -102,12 +121,12 @@ export class SurveyService {
       // 4. Return ipfs:// URI
       return `ipfs://${result.cid.toString()}`;
     } catch (err) {
-      console.error('❌ Failed to upload survey metadata to IPFS:', err);
-      throw new Error('IPFS metadata upload failed');
+      console.error("❌ Failed to upload survey metadata to IPFS:", err);
+      throw new Error("IPFS metadata upload failed");
     }
   }
 
-    /**
+  /**
    * surveyId로부터 tokenId를 생성하고, 해당 NFT의 URI(ipfs://...)를 조회
    * @param surveyId 설문 ID
    * @returns ipfs://CID 형식의 메타데이터 URI
@@ -119,8 +138,7 @@ export class SurveyService {
       return uri;
     } catch (err) {
       console.error(`❌ Failed to get URI for surveyId ${surveyId}:`, err);
-      throw new Error('Failed to retrieve token URI');
+      throw new Error("Failed to retrieve token URI");
     }
   }
-
-}
\ No newline at end of file
+}
